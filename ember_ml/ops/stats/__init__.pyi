"""
Type stub file for ember_ml.ops.stats module.

This provides explicit type hints for all dynamically aliased statistical operations,
allowing type checkers to recognize the proper signatures of stats functions.
"""

from typing import Optional, Any, Union, Tuple, Dict, Set, Sequence, overload

from ember_ml.nn.tensor.types import TensorLike
type Tensor = Any

# Backend control functions imported from ops
def get_stats_module() -> Any: ...

# Statistical operations
def mean(x: TensorLike, axis: Optional[Union[int, Tuple[int, ...]]] = None, keepdims: bool = False) -> Tensor: ...
def var(x: TensorLike, axis: Optional[Union[int, Tuple[int, ...]]] = None, keepdims: bool = False) -> Tensor: ...
def median(x: TensorLike, axis: Optional[Union[int, Tuple[int, ...]]] = None, keepdims: bool = False) -> Tensor: ...
def std(x: TensorLike, axis: Optional[Union[int, Tuple[int, ...]]] = None, keepdims: bool = False) -> Tensor: ...
def percentile(x: TensorLike, q: Union[float, TensorLike], axis: Optional[Union[int, Tuple[int, ...]]] = None) -> Tensor: ...
def max(x: TensorLike, axis: Optional[Union[int, Tuple[int, ...]]] = None, keepdims: bool = False) -> Tensor: ...
def min(x: TensorLike, axis: Optional[Union[int, Tuple[int, ...]]] = None, keepdims: bool = False) -> Tensor: ...
def sum(x: TensorLike, axis: Optional[Union[int, Tuple[int, ...]]] = None, keepdims: bool = False, dtype: Optional[Any] = None) -> Tensor: ...
def cumsum(x: TensorLike, axis: int = 0) -> Tensor: ...
def argmax(x: TensorLike, axis: Optional[int] = None) -> Tensor: ...
def sort(x: TensorLike, axis: int = -1, descending: bool = False) -> Tensor: ...
def argsort(x: TensorLike, axis: int = -1, descending: bool = False) -> Tensor: ...
def gaussian(shape: Union[int, Tuple[int, ...]], mean: float = 0.0, stddev: float = 1.0) -> Tensor: ...

def _update_stats_aliases() -> None:
    """Dynamically updates this module's namespace with backend stats functions."""
    pass  # Placeholder for the actual implementation
def set_backend(backend: str) -> None:
    """Sets the backend for the stats module."""
    pass  # Placeholder for the actual implementation
def get_backend() -> str:
    """Gets the current backend for the stats module."""
    pass  # Placeholder for the actual implementation
def auto_select_backend() -> str:
    """Automatically selects the best backend for the stats module."""
    pass  # Placeholder for the actual implementation
def get_backend_module() -> Any:
    """Gets the backend module for the stats module."""
    pass  # Placeholder for the actual implementation