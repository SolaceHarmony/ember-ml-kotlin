#include <metal_stdlib>
using namespace metal;
#define TG_SIZE   64u
#define LIMBS     4u
#define LIMB_RADIX 4294967296.0f

kernel void panel_factor_qrp128(
    device uint*   A      [[buffer(0)]],   // limb-encoded scratch
    device uint*   shape  [[buffer(1)]],   // m, n, k, panel, limbs
    uint3          gsz    [[grid_size]],
    uint3          tidXYZ [[thread_position_in_grid]],
    uint3          ltidXYZ[[thread_position_in_threadgroup]])
{
    const uint col = tid + gsz.x * panel;  // Absolute column index
{
    const uint tid   = tidXYZ.x;
    const uint ltid  = ltidXYZ.x;
    const uint m     = shape[0], n = shape[1];
    const uint k     = shape[2], panel = shape[3];

    device uint* colA   = A;               // A  (m×n) limbs → column-major
    device uint* colV   = A + m*n;         // V  (m×k) limbs
    device uint* tauBuf = colV + m*k;      // τ  (k) fp32  (reuse high 32 bits)
    device uint* pivBuf = tauBuf + k;      // pivot norms / idx

    if(tid >= panel || tid + shape[4] >= k) return; // outside this panel

    threadgroup uint sh[LIMBS][TG_SIZE];
    threadgroup float shf[TG_SIZE];
    threadgroup float tg_inv;

    // ---- copy A→V so next panels have the v's --------------------
    const uint col = tid + gsz.x * panel;  // Define column index
    for(uint r=ltid; r<m; r+=TG_SIZE)
        colV[r*k + col] = colA[r*n + col];

    threadgroup_barrier(mem_flags::mem_threadgroup);

    // ---- compute norm in limbs + fp32 fast path ------------------
    uint loc[LIMBS]={0};
    float fp32=0;
    for(uint r=ltid; r<m; r+=TG_SIZE){
        float v = as_type<float>(colV[r*k + col]);
        fp32=fma(v,v,fp32);
        ulong p = ulong(as_type<uint>(v))*ulong(as_type<uint>(v));
        loc[0]+=uint(p); uint c=p>>32;
        for(uint i=1;i<LIMBS;++i){ uint t=loc[i]+c; c=(t<loc[i]); loc[i]=t; if(!c)break;}
    }
    for(uint i=0;i<LIMBS;++i) sh[i][ltid]=loc[i];  shf[ltid]=fp32;
    threadgroup_barrier(mem_flags::mem_threadgroup);

    // SIMD-level reduce fp32 for pivot selection
    float simdf = simd_sum_reduce(shf[ltid]);
    if(simd_is_first()) shf[0]=simdf;
    threadgroup_barrier(mem_flags::mem_threadgroup);

    // tree reduce limbs
    for(uint l=0;l<LIMBS;++l){ for(uint off=TG_SIZE>>1; off; off>>=1){ if(ltid<off) sh[l][ltid]+=sh[l][ltid+off]; threadgroup_barrier(mem_flags::mem_threadgroup);} }
    float norm = sqrt(max(  ({
        float acc=0,sc=1; for(uint i=0;i<LIMBS;++i){ acc += float(sh[i][0])*sc; sc*=LIMB_RADIX; } acc;}), 1.0e-18f));

    if(ltid==0){
        tg_inv = 1.0f/norm; tauBuf[col] = as_type<uint>(norm);
        // atomic pivot record
        device atomic_uint* piv = (device atomic_uint*)pivBuf;
        uint pack = ((uint)(norm*1e8f)&0xFFFF0000u) | (col & 0xFFFFu);
        atomic_fetch_max_explicit(piv, pack, memory_order_relaxed);
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);

    // ---- normalise v ----------------------------------------------
    float inv = tg_inv;
    for(uint r=ltid; r<m; r+=TG_SIZE){
        float v = as_type<float>(colV[r*k + col]) * inv;
        colV[r*k + col] = as_type<uint>(v);
    }
}