#include <metal_stdlib>
using namespace metal;
#define BLK 128u

kernel void apply_update_qrp128(
    device uint* A     [[buffer(0)]],
    device uint* shape [[buffer(1)]],
    uint3 g [[thread_position_in_grid]],
    uint3 l [[thread_position_in_threadgroup]])
{
    const uint m=shape[0], n=shape[1], k=shape[2], panel=shape[3];
    const uint blk_i = g.y, blk_j = g.x;   // tile indices
    const uint row0  = blk_i*BLK + l.y;
    const uint col0  = blk_j*BLK + l.x + panel;

    if(row0>=m||col0>=n) return;

    // load Householder v's and apply
    float2 acc={0,0};
    for(uint p=0;p<panel;++p){
        float v = as_type<float>(A[(row0)*k + p]);
        float tau=as_type<float>(A[m*n + p]);
        float a = as_type<float>(A[(row0)*n + col0]);
        acc.x += v*a;
        acc.y  = tau;
    }
    float newA = as_type<float>(A[row0*n + col0]) - 2.0f*acc.x*acc.y;
    A[row0*n + col0] = as_type<uint>(newA);
}