#include <metal_stdlib>
using namespace metal;
#define TG 32u

kernel void build_q_qrp128(
    device uint* A     [[buffer(0)]],
    device uint* shape [[buffer(1)]],
    uint3 gsz [[grid_size]],
    uint3 tid [[thread_position_in_grid]],
    uint3 ltid[[thread_position_in_threadgroup]])
{
    const uint m=shape[0], k=shape[2];
    if(tid.x>=k || tid.y>=m) return;

    // Simple back-apply stored v's (FP32)
    float q = (tid.x==tid.y) ? 1.0f : 0.0f;
    for(int p=k-1; p>=0; --p){
        float v = as_type<float>(A[tid.y*k + p]);
        float tau = as_type<float>(A[m*n + p]);
        q -= 2.0f * tau * v * q;
    }
    A[m*n + tid.y*k + tid.x] = as_type<uint>(q);  // Store Q after A + V + Ï„
}