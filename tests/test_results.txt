============================= test session starts ==============================
platform darwin -- Python 3.12.2, pytest-8.3.4, pluggy-1.5.0 -- /Users/sydneybach/miniconda3/bin/python
cachedir: .pytest_cache
rootdir: /Volumes/stuff/Projects/LNNDemo
plugins: cov-6.0.0, langsmith-0.3.4, anyio-4.8.0
collecting ... collected 21 items

test_backend.py::TestBackendSelection::test_default_backend PASSED       [  4%]
test_backend.py::TestBackendSelection::test_backend_switching[numpy] PASSED [  9%]
test_backend.py::TestBackendSelection::test_backend_switching[torch] PASSED [ 14%]
test_backend.py::TestBackendSelection::test_backend_switching[mlx] PASSED [ 19%]
test_backend.py::TestBackendSelection::test_invalid_backend PASSED       [ 23%]
test_backend.py::TestBackendPersistence::test_backend_persistence[numpy] FAILED [ 28%]
test_backend.py::TestBackendPersistence::test_backend_persistence[torch] PASSED [ 33%]
test_backend.py::TestBackendPersistence::test_backend_persistence[mlx] FAILED [ 38%]
test_backend.py::TestBackendCompatibility::test_tensor_conversion[numpy-numpy] SKIPPED [ 42%]
test_backend.py::TestBackendCompatibility::test_tensor_conversion[numpy-torch] FAILED [ 47%]
test_backend.py::TestBackendCompatibility::test_tensor_conversion[numpy-mlx] PASSED [ 52%]
test_backend.py::TestBackendCompatibility::test_tensor_conversion[torch-numpy] FAILED [ 57%]
test_backend.py::TestBackendCompatibility::test_tensor_conversion[torch-torch] SKIPPED [ 61%]
test_backend.py::TestBackendCompatibility::test_tensor_conversion[torch-mlx] FAILED [ 66%]
test_backend.py::TestBackendCompatibility::test_tensor_conversion[mlx-numpy] PASSED [ 71%]
test_backend.py::TestBackendCompatibility::test_tensor_conversion[mlx-torch] FAILED [ 76%]
test_backend.py::TestBackendCompatibility::test_tensor_conversion[mlx-mlx] SKIPPED [ 80%]
test_backend.py::TestBackendCompatibility::test_operation_consistency[numpy] PASSED [ 85%]
test_backend.py::TestBackendCompatibility::test_operation_consistency[torch] FAILED [ 90%]
test_backend.py::TestBackendCompatibility::test_operation_consistency[mlx] PASSED [ 95%]
test_backend.py::TestBackendAutoDetection::test_backend_auto_detection PASSED [100%]

=================================== FAILURES ===================================
____________ TestBackendPersistence.test_backend_persistence[numpy] ____________

self = <test_backend.TestBackendPersistence object at 0x3762dbe60>
backend_name = 'numpy'

    @pytest.mark.parametrize('backend_name', BACKENDS)
    def test_backend_persistence(self, backend_name):
        """Test that backend setting persists across module reloads."""
        # Get the current backend
        current_backend = get_backend()
    
        try:
            # Switch to the specified backend
            set_backend(backend_name)
            ops.set_ops(backend_name)
    
            # Verify that the backend is set correctly
            assert get_backend() == backend_name
            assert ops.get_ops() == backend_name
    
            # Reload the backend module
            import importlib
            importlib.reload(importlib.import_module('ember_ml.backend'))
    
            # Verify that the backend is still set correctly
>           assert get_backend() == backend_name
E           AssertionError: assert 'torch' == 'numpy'
E             
E             - numpy
E             + torch

test_backend.py:107: AssertionError
_____________ TestBackendPersistence.test_backend_persistence[mlx] _____________

self = <test_backend.TestBackendPersistence object at 0x3762f80e0>
backend_name = 'mlx'

    @pytest.mark.parametrize('backend_name', BACKENDS)
    def test_backend_persistence(self, backend_name):
        """Test that backend setting persists across module reloads."""
        # Get the current backend
        current_backend = get_backend()
    
        try:
            # Switch to the specified backend
            set_backend(backend_name)
            ops.set_ops(backend_name)
    
            # Verify that the backend is set correctly
            assert get_backend() == backend_name
            assert ops.get_ops() == backend_name
    
            # Reload the backend module
            import importlib
            importlib.reload(importlib.import_module('ember_ml.backend'))
    
            # Verify that the backend is still set correctly
>           assert get_backend() == backend_name
E           AssertionError: assert 'torch' == 'mlx'
E             
E             - mlx
E             + torch

test_backend.py:107: AssertionError
_________ TestBackendCompatibility.test_tensor_conversion[numpy-torch] _________

self = <test_backend.TestBackendCompatibility object at 0x3762f8260>
backend1 = 'torch', backend2 = 'numpy'

    @pytest.mark.parametrize('backend1', BACKENDS)
    @pytest.mark.parametrize('backend2', BACKENDS)
    def test_tensor_conversion(self, backend1, backend2):
        """Test tensor conversion between backends."""
        # Skip if the backends are the same
        if backend1 == backend2:
            pytest.skip(f"Skipping conversion from {backend1} to {backend2}")
    
        # Get the current backend
        current_backend = get_backend()
    
        try:
            # Switch to the first backend
            set_backend(backend1)
            ops.set_ops(backend1)
    
            # Create a tensor
>           x1 = ops.ones((3, 4))

test_backend.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:125: in <lambda>
    ones = lambda *args, **kwargs: tensor_ops().ones(*args, **kwargs)
../ember_ml/ops/__init__.py:108: in tensor_ops
    return _get_ops_instance(TensorOps)
../ember_ml/ops/__init__.py:75: in _get_ops_instance
    module = _load_ops_module()
../ember_ml/ops/__init__.py:66: in _load_ops_module
    _CURRENT_MODULE = importlib.import_module(_OPS_IMPLEMENTATIONS[_CURRENT_OPS])
/Users/sydneybach/miniconda3/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:995: in exec_module
    ???
<frozen importlib._bootstrap>:488: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    """
    PyTorch implementation of operations.
    
    This module provides PyTorch implementations of the operations defined in
    the interfaces module.
    """
    
    from ember_ml.ops.torch.tensor_ops import TorchTensorOps
>   from ember_ml.ops.torch.math_ops import TorchMathOps
E   ModuleNotFoundError: No module named 'ember_ml.ops.torch.math_ops'

../ember_ml/ops/torch/__init__.py:9: ModuleNotFoundError
_________ TestBackendCompatibility.test_tensor_conversion[torch-numpy] _________

self = <test_backend.TestBackendCompatibility object at 0x3762f8710>
backend1 = 'numpy', backend2 = 'torch'

    @pytest.mark.parametrize('backend1', BACKENDS)
    @pytest.mark.parametrize('backend2', BACKENDS)
    def test_tensor_conversion(self, backend1, backend2):
        """Test tensor conversion between backends."""
        # Skip if the backends are the same
        if backend1 == backend2:
            pytest.skip(f"Skipping conversion from {backend1} to {backend2}")
    
        # Get the current backend
        current_backend = get_backend()
    
        try:
            # Switch to the first backend
            set_backend(backend1)
            ops.set_ops(backend1)
    
            # Create a tensor
            x1 = ops.ones((3, 4))
    
            # Switch to the second backend
            set_backend(backend2)
            ops.set_ops(backend2)
    
            # Convert the tensor to the second backend
>           x2 = tensor.convert_to_tensor(ops.to_numpy(x1))

test_backend.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:192: in <lambda>
    to_numpy = lambda x: tensor_ops().to_numpy(x)
../ember_ml/ops/__init__.py:108: in tensor_ops
    return _get_ops_instance(TensorOps)
../ember_ml/ops/__init__.py:75: in _get_ops_instance
    module = _load_ops_module()
../ember_ml/ops/__init__.py:66: in _load_ops_module
    _CURRENT_MODULE = importlib.import_module(_OPS_IMPLEMENTATIONS[_CURRENT_OPS])
/Users/sydneybach/miniconda3/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:995: in exec_module
    ???
<frozen importlib._bootstrap>:488: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    """
    PyTorch implementation of operations.
    
    This module provides PyTorch implementations of the operations defined in
    the interfaces module.
    """
    
    from ember_ml.ops.torch.tensor_ops import TorchTensorOps
>   from ember_ml.ops.torch.math_ops import TorchMathOps
E   ModuleNotFoundError: No module named 'ember_ml.ops.torch.math_ops'

../ember_ml/ops/torch/__init__.py:9: ModuleNotFoundError
__________ TestBackendCompatibility.test_tensor_conversion[torch-mlx] __________

self = <test_backend.TestBackendCompatibility object at 0x3762f8830>
backend1 = 'mlx', backend2 = 'torch'

    @pytest.mark.parametrize('backend1', BACKENDS)
    @pytest.mark.parametrize('backend2', BACKENDS)
    def test_tensor_conversion(self, backend1, backend2):
        """Test tensor conversion between backends."""
        # Skip if the backends are the same
        if backend1 == backend2:
            pytest.skip(f"Skipping conversion from {backend1} to {backend2}")
    
        # Get the current backend
        current_backend = get_backend()
    
        try:
            # Switch to the first backend
            set_backend(backend1)
            ops.set_ops(backend1)
    
            # Create a tensor
            x1 = ops.ones((3, 4))
    
            # Switch to the second backend
            set_backend(backend2)
            ops.set_ops(backend2)
    
            # Convert the tensor to the second backend
>           x2 = tensor.convert_to_tensor(ops.to_numpy(x1))

test_backend.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:192: in <lambda>
    to_numpy = lambda x: tensor_ops().to_numpy(x)
../ember_ml/ops/__init__.py:108: in tensor_ops
    return _get_ops_instance(TensorOps)
../ember_ml/ops/__init__.py:75: in _get_ops_instance
    module = _load_ops_module()
../ember_ml/ops/__init__.py:66: in _load_ops_module
    _CURRENT_MODULE = importlib.import_module(_OPS_IMPLEMENTATIONS[_CURRENT_OPS])
/Users/sydneybach/miniconda3/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:995: in exec_module
    ???
<frozen importlib._bootstrap>:488: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    """
    PyTorch implementation of operations.
    
    This module provides PyTorch implementations of the operations defined in
    the interfaces module.
    """
    
    from ember_ml.ops.torch.tensor_ops import TorchTensorOps
>   from ember_ml.ops.torch.math_ops import TorchMathOps
E   ModuleNotFoundError: No module named 'ember_ml.ops.torch.math_ops'

../ember_ml/ops/torch/__init__.py:9: ModuleNotFoundError
__________ TestBackendCompatibility.test_tensor_conversion[mlx-torch] __________

self = <test_backend.TestBackendCompatibility object at 0x3762f8950>
backend1 = 'torch', backend2 = 'mlx'

    @pytest.mark.parametrize('backend1', BACKENDS)
    @pytest.mark.parametrize('backend2', BACKENDS)
    def test_tensor_conversion(self, backend1, backend2):
        """Test tensor conversion between backends."""
        # Skip if the backends are the same
        if backend1 == backend2:
            pytest.skip(f"Skipping conversion from {backend1} to {backend2}")
    
        # Get the current backend
        current_backend = get_backend()
    
        try:
            # Switch to the first backend
            set_backend(backend1)
            ops.set_ops(backend1)
    
            # Create a tensor
>           x1 = ops.ones((3, 4))

test_backend.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:125: in <lambda>
    ones = lambda *args, **kwargs: tensor_ops().ones(*args, **kwargs)
../ember_ml/ops/__init__.py:108: in tensor_ops
    return _get_ops_instance(TensorOps)
../ember_ml/ops/__init__.py:75: in _get_ops_instance
    module = _load_ops_module()
../ember_ml/ops/__init__.py:66: in _load_ops_module
    _CURRENT_MODULE = importlib.import_module(_OPS_IMPLEMENTATIONS[_CURRENT_OPS])
/Users/sydneybach/miniconda3/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:995: in exec_module
    ???
<frozen importlib._bootstrap>:488: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    """
    PyTorch implementation of operations.
    
    This module provides PyTorch implementations of the operations defined in
    the interfaces module.
    """
    
    from ember_ml.ops.torch.tensor_ops import TorchTensorOps
>   from ember_ml.ops.torch.math_ops import TorchMathOps
E   ModuleNotFoundError: No module named 'ember_ml.ops.torch.math_ops'

../ember_ml/ops/torch/__init__.py:9: ModuleNotFoundError
__________ TestBackendCompatibility.test_operation_consistency[torch] __________

self = <test_backend.TestBackendCompatibility object at 0x3675cc6b0>
backend_name = 'torch'

    @pytest.mark.parametrize('backend_name', BACKENDS)
    def test_operation_consistency(self, backend_name):
        """Test operation results consistency across backends."""
        # Get the current backend
        current_backend = get_backend()
    
        try:
            # Switch to numpy backend
            set_backend('numpy')
            ops.set_ops('numpy')
    
            # Create tensors
            x_numpy = ops.ones((3, 4))
            y_numpy = ops.full((3, 4), 2)
    
            # Perform operations
            add_numpy = ops.add(x_numpy, y_numpy)
            subtract_numpy = ops.subtract(x_numpy, y_numpy)
            multiply_numpy = ops.multiply(x_numpy, y_numpy)
            divide_numpy = ops.divide(x_numpy, y_numpy)
    
            # Switch to the specified backend
            set_backend(backend_name)
            ops.set_ops(backend_name)
    
            # Create tensors
>           x = ops.ones((3, 4))

test_backend.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:125: in <lambda>
    ones = lambda *args, **kwargs: tensor_ops().ones(*args, **kwargs)
../ember_ml/ops/__init__.py:108: in tensor_ops
    return _get_ops_instance(TensorOps)
../ember_ml/ops/__init__.py:75: in _get_ops_instance
    module = _load_ops_module()
../ember_ml/ops/__init__.py:66: in _load_ops_module
    _CURRENT_MODULE = importlib.import_module(_OPS_IMPLEMENTATIONS[_CURRENT_OPS])
/Users/sydneybach/miniconda3/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:995: in exec_module
    ???
<frozen importlib._bootstrap>:488: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    """
    PyTorch implementation of operations.
    
    This module provides PyTorch implementations of the operations defined in
    the interfaces module.
    """
    
    from ember_ml.ops.torch.tensor_ops import TorchTensorOps
>   from ember_ml.ops.torch.math_ops import TorchMathOps
E   ModuleNotFoundError: No module named 'ember_ml.ops.torch.math_ops'

../ember_ml/ops/torch/__init__.py:9: ModuleNotFoundError
=============================== warnings summary ===============================
<frozen importlib._bootstrap>:488
  <frozen importlib._bootstrap>:488: DeprecationWarning: Type google._upb._message.MessageMapContainer uses PyType_Spec with a metaclass that has custom tp_new. This is deprecated and will no longer be allowed in Python 3.14.

<frozen importlib._bootstrap>:488
  <frozen importlib._bootstrap>:488: DeprecationWarning: Type google._upb._message.ScalarMapContainer uses PyType_Spec with a metaclass that has custom tp_new. This is deprecated and will no longer be allowed in Python 3.14.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED test_backend.py::TestBackendPersistence::test_backend_persistence[numpy]
FAILED test_backend.py::TestBackendPersistence::test_backend_persistence[mlx]
FAILED test_backend.py::TestBackendCompatibility::test_tensor_conversion[numpy-torch]
FAILED test_backend.py::TestBackendCompatibility::test_tensor_conversion[torch-numpy]
FAILED test_backend.py::TestBackendCompatibility::test_tensor_conversion[torch-mlx]
FAILED test_backend.py::TestBackendCompatibility::test_tensor_conversion[mlx-torch]
FAILED test_backend.py::TestBackendCompatibility::test_operation_consistency[torch]
============= 7 failed, 11 passed, 3 skipped, 2 warnings in 6.32s ==============
