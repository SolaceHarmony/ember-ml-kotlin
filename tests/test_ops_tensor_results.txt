============================= test session starts ==============================
platform darwin -- Python 3.12.2, pytest-8.3.4, pluggy-1.5.0 -- /Users/sydneybach/miniconda3/bin/python
cachedir: .pytest_cache
rootdir: /Volumes/stuff/Projects/LNNDemo
plugins: cov-6.0.0, langsmith-0.3.4, anyio-4.8.0
collecting ... collected 39 items

test_ops_tensor.py::TestTensorCreation::test_zeros[numpy] PASSED         [  2%]
test_ops_tensor.py::TestTensorCreation::test_zeros[torch] PASSED         [  5%]
test_ops_tensor.py::TestTensorCreation::test_zeros[mlx] PASSED           [  7%]
test_ops_tensor.py::TestTensorCreation::test_ones[numpy] PASSED          [ 10%]
test_ops_tensor.py::TestTensorCreation::test_ones[torch] PASSED          [ 12%]
test_ops_tensor.py::TestTensorCreation::test_ones[mlx] PASSED            [ 15%]
test_ops_tensor.py::TestTensorCreation::test_zeros_like[numpy] PASSED    [ 17%]
test_ops_tensor.py::TestTensorCreation::test_zeros_like[torch] PASSED    [ 20%]
test_ops_tensor.py::TestTensorCreation::test_zeros_like[mlx] FAILED      [ 23%]
test_ops_tensor.py::TestTensorCreation::test_ones_like[numpy] PASSED     [ 25%]
test_ops_tensor.py::TestTensorCreation::test_ones_like[torch] PASSED     [ 28%]
test_ops_tensor.py::TestTensorCreation::test_ones_like[mlx] FAILED       [ 30%]
test_ops_tensor.py::TestTensorCreation::test_eye[numpy] PASSED           [ 33%]
test_ops_tensor.py::TestTensorCreation::test_eye[torch] FAILED           [ 35%]
test_ops_tensor.py::TestTensorCreation::test_eye[mlx] PASSED             [ 38%]
test_ops_tensor.py::TestTensorManipulation::test_reshape[numpy] PASSED   [ 41%]
test_ops_tensor.py::TestTensorManipulation::test_reshape[torch] PASSED   [ 43%]
test_ops_tensor.py::TestTensorManipulation::test_reshape[mlx] PASSED     [ 46%]
test_ops_tensor.py::TestTensorManipulation::test_transpose[numpy] FAILED [ 48%]
test_ops_tensor.py::TestTensorManipulation::test_transpose[torch] FAILED [ 51%]
test_ops_tensor.py::TestTensorManipulation::test_transpose[mlx] FAILED   [ 53%]
test_ops_tensor.py::TestTensorManipulation::test_concatenate[numpy] PASSED [ 56%]
test_ops_tensor.py::TestTensorManipulation::test_concatenate[torch] PASSED [ 58%]
test_ops_tensor.py::TestTensorManipulation::test_concatenate[mlx] PASSED [ 61%]
test_ops_tensor.py::TestTensorManipulation::test_stack[numpy] PASSED     [ 64%]
test_ops_tensor.py::TestTensorManipulation::test_stack[torch] PASSED     [ 66%]
test_ops_tensor.py::TestTensorManipulation::test_stack[mlx] PASSED       [ 69%]
test_ops_tensor.py::TestTensorInfo::test_shape[numpy] PASSED             [ 71%]
test_ops_tensor.py::TestTensorInfo::test_shape[torch] PASSED             [ 74%]
test_ops_tensor.py::TestTensorInfo::test_shape[mlx] PASSED               [ 76%]
test_ops_tensor.py::TestTensorInfo::test_dtype[numpy] PASSED             [ 79%]
test_ops_tensor.py::TestTensorInfo::test_dtype[torch] PASSED             [ 82%]
test_ops_tensor.py::TestTensorInfo::test_dtype[mlx] PASSED               [ 84%]
test_ops_tensor.py::TestTensorInfo::test_cast[numpy] PASSED              [ 87%]
test_ops_tensor.py::TestTensorInfo::test_cast[torch] PASSED              [ 89%]
test_ops_tensor.py::TestTensorInfo::test_cast[mlx] FAILED                [ 92%]
test_ops_tensor.py::TestTensorInfo::test_copy[numpy] PASSED              [ 94%]
test_ops_tensor.py::TestTensorInfo::test_copy[torch] PASSED              [ 97%]
test_ops_tensor.py::TestTensorInfo::test_copy[mlx] FAILED                [100%]

=================================== FAILURES ===================================
___________________ TestTensorCreation.test_zeros_like[mlx] ____________________

self = <test_ops_tensor.TestTensorCreation object at 0x3438980e0>
backend = 'mlx'

    def test_zeros_like(self, backend):
        """Test zeros_like operation."""
        # Create a tensor to use as reference
        shape = (3, 4)
        x_ref = tensor.ones(shape)
    
        # Test zeros_like
>       x = tensor.zeros_like(x_ref)

test_ops_tensor.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:126: in <lambda>
    zeros_like = lambda *args, **kwargs: tensor_ops().zeros_like(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ember_ml.ops.mlx.tensor_ops.MLXTensorOps object at 0x3438fdcd0>
x = array([[1, 1, 1, 1],
       [1, 1, 1, 1],
       [1, 1, 1, 1]], dtype=float32)
dtype = None, device = None

    def zeros_like(self, x: ArrayLike, dtype: Optional[DType] = None, device: Optional[str] = None) -> mx.array:
        """
        Create an MLX array of zeros with the same shape as the input.
    
        Args:
            x: Input array
            dtype: Optional data type
            device: Optional device
    
        Returns:
            MLX array of zeros with the same shape as x
        """
        x_tensor = self.convert_to_tensor(x)
>       return mx.zeros_like(x_tensor, dtype=dtype)
E       TypeError: zeros_like(): incompatible function arguments. The following argument types are supported:
E           1. zeros_like(a: array, /, *, stream: Union[None, Stream, Device] = None) -> array
E       
E       Invoked with types: mlx.core.array, kwargs = { dtype: NoneType }

../ember_ml/ops/mlx/tensor_ops.py:63: TypeError
____________________ TestTensorCreation.test_ones_like[mlx] ____________________

self = <test_ops_tensor.TestTensorCreation object at 0x3438984a0>
backend = 'mlx'

    def test_ones_like(self, backend):
        """Test ones_like operation."""
        # Create a tensor to use as reference
        shape = (3, 4)
        x_ref = tensor.zeros(shape)
    
        # Test ones_like
>       x = tensor.ones_like(x_ref)

test_ops_tensor.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:127: in <lambda>
    ones_like = lambda *args, **kwargs: tensor_ops().ones_like(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ember_ml.ops.mlx.tensor_ops.MLXTensorOps object at 0x37c9e3ce0>
x = array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=float32)
dtype = None, device = None

    def ones_like(self, x: ArrayLike, dtype: Optional[DType] = None, device: Optional[str] = None) -> mx.array:
        """
        Create an MLX array of ones with the same shape as the input.
    
        Args:
            x: Input array
            dtype: Optional data type
            device: Optional device
    
        Returns:
            MLX array of ones with the same shape as x
        """
        x_tensor = self.convert_to_tensor(x)
>       return mx.ones_like(x_tensor, dtype=dtype)
E       TypeError: ones_like(): incompatible function arguments. The following argument types are supported:
E           1. ones_like(a: array, /, *, stream: Union[None, Stream, Device] = None) -> array
E       
E       Invoked with types: mlx.core.array, kwargs = { dtype: NoneType }

../ember_ml/ops/mlx/tensor_ops.py:78: TypeError
______________________ TestTensorCreation.test_eye[torch] ______________________

self = <test_ops_tensor.TestTensorCreation object at 0x343898830>
backend = 'torch'

    def test_eye(self, backend):
        """Test eye operation."""
        # Test square matrix
        n = 3
>       x = tensor.eye(n)

test_ops_tensor.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:128: in <lambda>
    eye = lambda *args, **kwargs: tensor_ops().eye(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ember_ml.ops.torch.tensor_ops.TorchTensorOps object at 0x37c9e2a20>
n = 3, m = None, dtype = None, device = None

    def eye(self, n: int, m: Optional[int] = None, dtype: Optional[DType] = None, device: Optional[str] = None) -> torch.Tensor:
        """
        Create a PyTorch identity matrix.
    
        Args:
            n: Number of rows
            m: Number of columns (default: n)
            dtype: Optional data type
            device: Optional device
    
        Returns:
            PyTorch identity matrix of shape (n, m)
        """
>       return torch.eye(n, m, dtype=dtype, device=device)
E       TypeError: eye() received an invalid combination of arguments - got (int, NoneType, device=NoneType, dtype=NoneType), but expected one of:
E        * (int n, *, Tensor out = None, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)
E        * (int n, int m, *, Tensor out = None, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)

../ember_ml/ops/torch/tensor_ops.py:93: TypeError
_________________ TestTensorManipulation.test_transpose[numpy] _________________

self = <test_ops_tensor.TestTensorManipulation object at 0x340590b90>
backend = 'numpy'

    def test_transpose(self, backend):
        """Test transpose operation."""
        # Create a tensor
        shape = (2, 3, 4)
        x = tensor.ones(shape)
    
        # Test default transpose (swap last two dimensions)
        y = ops.transpose(x)
>       assert tensor.shape(y) == (2, 4, 3)
E       AssertionError: assert (4, 3, 2) == (2, 4, 3)
E         
E         At index 0 diff: 4 != 2
E         
E         Full diff:
E           (
E         -     2,
E               4,...
E         
E         ...Full output truncated (3 lines hidden), use '-vv' to show

test_ops_tensor.py:213: AssertionError
_________________ TestTensorManipulation.test_transpose[torch] _________________

self = <test_ops_tensor.TestTensorManipulation object at 0x343898e30>
backend = 'torch'

    def test_transpose(self, backend):
        """Test transpose operation."""
        # Create a tensor
        shape = (2, 3, 4)
        x = tensor.ones(shape)
    
        # Test default transpose (swap last two dimensions)
>       y = ops.transpose(x)

test_ops_tensor.py:212: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:134: in <lambda>
    transpose = lambda *args, **kwargs: tensor_ops().transpose(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ember_ml.ops.torch.tensor_ops.TorchTensorOps object at 0x37c9e2f60>
x = tensor([[[1., 1., 1., 1.],
         [1., 1., 1., 1.],
         [1., 1., 1., 1.]],

        [[1., 1., 1., 1.],
         [1., 1., 1., 1.],
         [1., 1., 1., 1.]]])
axes = None

    def transpose(self, x: ArrayLike, axes: Optional[Sequence[int]] = None) -> torch.Tensor:
        """
        Permute the dimensions of a PyTorch tensor.
    
        Args:
            x: Input tensor
            axes: Optional permutation of dimensions
    
        Returns:
            Transposed PyTorch tensor
        """
        x_tensor = self.convert_to_tensor(x)
        if axes is None:
>           return x_tensor.t()
E           RuntimeError: t() expects a tensor with <= 2 dimensions, but self is 3D

../ember_ml/ops/torch/tensor_ops.py:185: RuntimeError
__________________ TestTensorManipulation.test_transpose[mlx] __________________

self = <test_ops_tensor.TestTensorManipulation object at 0x343898f50>
backend = 'mlx'

    def test_transpose(self, backend):
        """Test transpose operation."""
        # Create a tensor
        shape = (2, 3, 4)
        x = tensor.ones(shape)
    
        # Test default transpose (swap last two dimensions)
        y = ops.transpose(x)
>       assert tensor.shape(y) == (2, 4, 3)
E       AssertionError: assert (4, 3, 2) == (2, 4, 3)
E         
E         At index 0 diff: 4 != 2
E         
E         Full diff:
E           (
E         -     2,
E               4,...
E         
E         ...Full output truncated (3 lines hidden), use '-vv' to show

test_ops_tensor.py:213: AssertionError
________________________ TestTensorInfo.test_cast[mlx] _________________________

self = <test_ops_tensor.TestTensorInfo object at 0x34389a630>, backend = 'mlx'

    def test_cast(self, backend):
        """Test cast operation."""
        # Create a tensor
        x = tensor.ones((3, 4))
    
        # Test cast to different dtype
        if backend == 'numpy':
            dtype = np.int32
        elif backend == 'torch':
            import torch
            dtype = torch.int32
        elif backend == 'mlx':
            import mlx.core
            dtype = mlx.core.int32
        else:
            pytest.skip(f"Unknown backend: {backend}")
    
>       y = ops.cast(x, dtype)

test_ops_tensor.py:329: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:145: in <lambda>
    cast = lambda *args, **kwargs: tensor_ops().cast(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ember_ml.ops.mlx.tensor_ops.MLXTensorOps object at 0x37cd042f0>
x = array([[1, 1, 1, 1],
       [1, 1, 1, 1],
       [1, 1, 1, 1]], dtype=float32)
dtype = mlx.core.int32

    def cast(self, x: ArrayLike, dtype: DType) -> mx.array:
        """
        Cast an MLX array to a different data type.
    
        Args:
            x: Input array
            dtype: Target data type
    
        Returns:
            MLX array with the target data type
        """
        x_tensor = self.convert_to_tensor(x)
>       return mx.astype(x_tensor, dtype)
E       AttributeError: module 'mlx.core' has no attribute 'astype'. Did you mean: 'Dtype'?

../ember_ml/ops/mlx/tensor_ops.py:376: AttributeError
________________________ TestTensorInfo.test_copy[mlx] _________________________

self = <test_ops_tensor.TestTensorInfo object at 0x34389aab0>, backend = 'mlx'

    def test_copy(self, backend):
        """Test copy operation."""
        # Create a tensor
        x = tensor.ones((3, 4))
    
        # Test copy
        y = ops.copy(x)
        assert tensor.shape(y) == tensor.shape(x)
        assert ops.dtype(y) == ops.dtype(x)
        assert np.allclose(tensor.to_numpy(y), tensor.to_numpy(x))
    
        # Verify that y is a copy, not a reference
        if backend == 'numpy':
            # For NumPy, we can modify the array directly
            x_np = tensor.to_numpy(x)
            x_np[0, 0] = 0
            assert tensor.to_numpy(x)[0, 0] == 0
            assert tensor.to_numpy(y)[0, 0] == 1
        elif backend == 'torch':
            # For PyTorch, we need to modify the tensor
            import torch
            x_torch = x
            x_torch[0, 0] = 0
            assert tensor.to_numpy(x)[0, 0] == 0
            assert tensor.to_numpy(y)[0, 0] == 1
        elif backend == 'mlx':
            # For MLX, we need to create a new tensor
            import mlx.core
            x_mlx = mlx.core.zeros((3, 4))
>           x_mlx = x_mlx.at[0, 0].set(1)
E           AttributeError: 'mlx.core.ArrayAt' object has no attribute 'set'

test_ops_tensor.py:362: AttributeError
=============================== warnings summary ===============================
<frozen importlib._bootstrap>:488
  <frozen importlib._bootstrap>:488: DeprecationWarning: Type google._upb._message.MessageMapContainer uses PyType_Spec with a metaclass that has custom tp_new. This is deprecated and will no longer be allowed in Python 3.14.

<frozen importlib._bootstrap>:488
  <frozen importlib._bootstrap>:488: DeprecationWarning: Type google._upb._message.ScalarMapContainer uses PyType_Spec with a metaclass that has custom tp_new. This is deprecated and will no longer be allowed in Python 3.14.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED test_ops_tensor.py::TestTensorCreation::test_zeros_like[mlx] - TypeErr...
FAILED test_ops_tensor.py::TestTensorCreation::test_ones_like[mlx] - TypeErro...
FAILED test_ops_tensor.py::TestTensorCreation::test_eye[torch] - TypeError: e...
FAILED test_ops_tensor.py::TestTensorManipulation::test_transpose[numpy] - As...
FAILED test_ops_tensor.py::TestTensorManipulation::test_transpose[torch] - Ru...
FAILED test_ops_tensor.py::TestTensorManipulation::test_transpose[mlx] - Asse...
FAILED test_ops_tensor.py::TestTensorInfo::test_cast[mlx] - AttributeError: m...
FAILED test_ops_tensor.py::TestTensorInfo::test_copy[mlx] - AttributeError: '...
=================== 8 failed, 31 passed, 2 warnings in 5.36s ===================
