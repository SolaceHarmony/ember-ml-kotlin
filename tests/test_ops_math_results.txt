============================= test session starts ==============================
platform darwin -- Python 3.12.2, pytest-8.3.4, pluggy-1.5.0 -- /Users/sydneybach/miniconda3/bin/python
cachedir: .pytest_cache
rootdir: /Volumes/stuff/Projects/LNNDemo
plugins: cov-6.0.0, langsmith-0.3.4, anyio-4.8.0
collecting ... collected 51 items

test_ops_math.py::TestBasicArithmetic::test_add[numpy] PASSED            [  1%]
test_ops_math.py::TestBasicArithmetic::test_add[torch] PASSED            [  3%]
test_ops_math.py::TestBasicArithmetic::test_add[mlx] PASSED              [  5%]
test_ops_math.py::TestBasicArithmetic::test_subtract[numpy] PASSED       [  7%]
test_ops_math.py::TestBasicArithmetic::test_subtract[torch] PASSED       [  9%]
test_ops_math.py::TestBasicArithmetic::test_subtract[mlx] PASSED         [ 11%]
test_ops_math.py::TestBasicArithmetic::test_multiply[numpy] PASSED       [ 13%]
test_ops_math.py::TestBasicArithmetic::test_multiply[torch] PASSED       [ 15%]
test_ops_math.py::TestBasicArithmetic::test_multiply[mlx] PASSED         [ 17%]
test_ops_math.py::TestBasicArithmetic::test_divide[numpy] PASSED         [ 19%]
test_ops_math.py::TestBasicArithmetic::test_divide[torch] PASSED         [ 21%]
test_ops_math.py::TestBasicArithmetic::test_divide[mlx] PASSED           [ 23%]
test_ops_math.py::TestBasicArithmetic::test_matmul[numpy] PASSED         [ 25%]
test_ops_math.py::TestBasicArithmetic::test_matmul[torch] PASSED         [ 27%]
test_ops_math.py::TestBasicArithmetic::test_matmul[mlx] PASSED           [ 29%]
test_ops_math.py::TestReductionOperations::test_mean[numpy] PASSED       [ 31%]
test_ops_math.py::TestReductionOperations::test_mean[torch] FAILED       [ 33%]
test_ops_math.py::TestReductionOperations::test_mean[mlx] FAILED         [ 35%]
test_ops_math.py::TestReductionOperations::test_sum[numpy] PASSED        [ 37%]
test_ops_math.py::TestReductionOperations::test_sum[torch] FAILED        [ 39%]
test_ops_math.py::TestReductionOperations::test_sum[mlx] FAILED          [ 41%]
test_ops_math.py::TestElementWiseOperations::test_exp[numpy] PASSED      [ 43%]
test_ops_math.py::TestElementWiseOperations::test_exp[torch] PASSED      [ 45%]
test_ops_math.py::TestElementWiseOperations::test_exp[mlx] PASSED        [ 47%]
test_ops_math.py::TestElementWiseOperations::test_log[numpy] PASSED      [ 49%]
test_ops_math.py::TestElementWiseOperations::test_log[torch] PASSED      [ 50%]
test_ops_math.py::TestElementWiseOperations::test_log[mlx] PASSED        [ 52%]
test_ops_math.py::TestElementWiseOperations::test_sqrt[numpy] PASSED     [ 54%]
test_ops_math.py::TestElementWiseOperations::test_sqrt[torch] PASSED     [ 56%]
test_ops_math.py::TestElementWiseOperations::test_sqrt[mlx] PASSED       [ 58%]
test_ops_math.py::TestElementWiseOperations::test_pow[numpy] PASSED      [ 60%]
test_ops_math.py::TestElementWiseOperations::test_pow[torch] PASSED      [ 62%]
test_ops_math.py::TestElementWiseOperations::test_pow[mlx] PASSED        [ 64%]
test_ops_math.py::TestElementWiseOperations::test_abs[numpy] PASSED      [ 66%]
test_ops_math.py::TestElementWiseOperations::test_abs[torch] PASSED      [ 68%]
test_ops_math.py::TestElementWiseOperations::test_abs[mlx] PASSED        [ 70%]
test_ops_math.py::TestElementWiseOperations::test_clip[numpy] PASSED     [ 72%]
test_ops_math.py::TestElementWiseOperations::test_clip[torch] FAILED     [ 74%]
test_ops_math.py::TestElementWiseOperations::test_clip[mlx] FAILED       [ 76%]
test_ops_math.py::TestActivationFunctions::test_sigmoid[numpy] PASSED    [ 78%]
test_ops_math.py::TestActivationFunctions::test_sigmoid[torch] PASSED    [ 80%]
test_ops_math.py::TestActivationFunctions::test_sigmoid[mlx] PASSED      [ 82%]
test_ops_math.py::TestActivationFunctions::test_relu[numpy] PASSED       [ 84%]
test_ops_math.py::TestActivationFunctions::test_relu[torch] FAILED       [ 86%]
test_ops_math.py::TestActivationFunctions::test_relu[mlx] FAILED         [ 88%]
test_ops_math.py::TestActivationFunctions::test_tanh[numpy] PASSED       [ 90%]
test_ops_math.py::TestActivationFunctions::test_tanh[torch] PASSED       [ 92%]
test_ops_math.py::TestActivationFunctions::test_tanh[mlx] PASSED         [ 94%]
test_ops_math.py::TestActivationFunctions::test_softmax[numpy] PASSED    [ 96%]
test_ops_math.py::TestActivationFunctions::test_softmax[torch] FAILED    [ 98%]
test_ops_math.py::TestActivationFunctions::test_softmax[mlx] FAILED      [100%]

=================================== FAILURES ===================================
___________________ TestReductionOperations.test_mean[torch] ___________________

self = <test_ops_math.TestReductionOperations object at 0x3446410a0>
backend = 'torch'

    def test_mean(self, backend):
        """Test mean operation."""
        # Create a tensor
>       x = ops.arange(12).reshape((3, 4))

test_ops_math.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:129: in <lambda>
    arange = lambda *args, **kwargs: tensor_ops().arange(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ember_ml.ops.torch.tensor_ops.TorchTensorOps object at 0x3446ff350>
start = 12, stop = None, step = 1, dtype = None, device = None

    def arange(self, start: int, stop: Optional[int] = None, step: int = 1, dtype: Optional[DType] = None, device: Optional[str] = None) -> torch.Tensor:
        """
        Create a PyTorch tensor with evenly spaced values within a given interval.
    
        Args:
            start: Start of interval (inclusive)
            stop: End of interval (exclusive)
            step: Spacing between values
            dtype: Optional data type
            device: Optional device
    
        Returns:
            PyTorch tensor with evenly spaced values
        """
>       return torch.arange(start, stop, step, dtype=dtype, device=device)
E       TypeError: arange() received an invalid combination of arguments - got (int, NoneType, int, device=NoneType, dtype=NoneType), but expected one of:
E        * (Number end, *, Tensor out = None, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)
E        * (Number start, Number end, *, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)
E        * (Number start, Number end, Number step = 1, *, Tensor out = None, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)

../ember_ml/ops/torch/tensor_ops.py:111: TypeError
____________________ TestReductionOperations.test_mean[mlx] ____________________

self = <test_ops_math.TestReductionOperations object at 0x3446410d0>
backend = 'mlx'

    def test_mean(self, backend):
        """Test mean operation."""
        # Create a tensor
>       x = ops.arange(12).reshape((3, 4))

test_ops_math.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:129: in <lambda>
    arange = lambda *args, **kwargs: tensor_ops().arange(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ember_ml.ops.mlx.tensor_ops.MLXTensorOps object at 0x3446ff050>
start = 12, stop = None, step = 1, dtype = None, device = None

    def arange(self, start: int, stop: Optional[int] = None, step: int = 1, dtype: Optional[DType] = None, device: Optional[str] = None) -> mx.array:
        """
        Create an MLX array with evenly spaced values within a given interval.
    
        Args:
            start: Start of interval (inclusive)
            stop: End of interval (exclusive)
            step: Spacing between values
            dtype: Optional data type
            device: Optional device
    
        Returns:
            MLX array with evenly spaced values
        """
>       return mx.arange(start, stop, step, dtype=dtype)
E       TypeError: arange(): incompatible function arguments. The following argument types are supported:
E           1. arange(start : Union[int, float], stop : Union[int, float], step : Union[None, int, float], dtype: Optional[Dtype] = None, *, stream: Union[None, Stream, Device] = None) -> array
E           2. arange(stop : Union[int, float], step : Union[None, int, float] = None, dtype: Optional[Dtype] = None, *, stream: Union[None, Stream, Device] = None) -> array
E       
E       Invoked with types: int, NoneType, int, kwargs = { dtype: NoneType }

../ember_ml/ops/mlx/tensor_ops.py:117: TypeError
___________________ TestReductionOperations.test_sum[torch] ____________________

self = <test_ops_math.TestReductionOperations object at 0x344640f20>
backend = 'torch'

    def test_sum(self, backend):
        """Test sum operation."""
        # Create a tensor
>       x = ops.arange(12).reshape((3, 4))

test_ops_math.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:129: in <lambda>
    arange = lambda *args, **kwargs: tensor_ops().arange(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ember_ml.ops.torch.tensor_ops.TorchTensorOps object at 0x37d8140b0>
start = 12, stop = None, step = 1, dtype = None, device = None

    def arange(self, start: int, stop: Optional[int] = None, step: int = 1, dtype: Optional[DType] = None, device: Optional[str] = None) -> torch.Tensor:
        """
        Create a PyTorch tensor with evenly spaced values within a given interval.
    
        Args:
            start: Start of interval (inclusive)
            stop: End of interval (exclusive)
            step: Spacing between values
            dtype: Optional data type
            device: Optional device
    
        Returns:
            PyTorch tensor with evenly spaced values
        """
>       return torch.arange(start, stop, step, dtype=dtype, device=device)
E       TypeError: arange() received an invalid combination of arguments - got (int, NoneType, int, device=NoneType, dtype=NoneType), but expected one of:
E        * (Number end, *, Tensor out = None, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)
E        * (Number start, Number end, *, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)
E        * (Number start, Number end, Number step = 1, *, Tensor out = None, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)

../ember_ml/ops/torch/tensor_ops.py:111: TypeError
____________________ TestReductionOperations.test_sum[mlx] _____________________

self = <test_ops_math.TestReductionOperations object at 0x344641400>
backend = 'mlx'

    def test_sum(self, backend):
        """Test sum operation."""
        # Create a tensor
>       x = ops.arange(12).reshape((3, 4))

test_ops_math.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:129: in <lambda>
    arange = lambda *args, **kwargs: tensor_ops().arange(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ember_ml.ops.mlx.tensor_ops.MLXTensorOps object at 0x37d816060>
start = 12, stop = None, step = 1, dtype = None, device = None

    def arange(self, start: int, stop: Optional[int] = None, step: int = 1, dtype: Optional[DType] = None, device: Optional[str] = None) -> mx.array:
        """
        Create an MLX array with evenly spaced values within a given interval.
    
        Args:
            start: Start of interval (inclusive)
            stop: End of interval (exclusive)
            step: Spacing between values
            dtype: Optional data type
            device: Optional device
    
        Returns:
            MLX array with evenly spaced values
        """
>       return mx.arange(start, stop, step, dtype=dtype)
E       TypeError: arange(): incompatible function arguments. The following argument types are supported:
E           1. arange(start : Union[int, float], stop : Union[int, float], step : Union[None, int, float], dtype: Optional[Dtype] = None, *, stream: Union[None, Stream, Device] = None) -> array
E           2. arange(stop : Union[int, float], step : Union[None, int, float] = None, dtype: Optional[Dtype] = None, *, stream: Union[None, Stream, Device] = None) -> array
E       
E       Invoked with types: int, NoneType, int, kwargs = { dtype: NoneType }

../ember_ml/ops/mlx/tensor_ops.py:117: TypeError
__________________ TestElementWiseOperations.test_clip[torch] __________________

self = <test_ops_math.TestElementWiseOperations object at 0x344642cc0>
backend = 'torch'

    def test_clip(self, backend):
        """Test clip operation."""
        # Create a tensor
>       x = ops.arange(12).reshape((3, 4))

test_ops_math.py:274: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:129: in <lambda>
    arange = lambda *args, **kwargs: tensor_ops().arange(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ember_ml.ops.torch.tensor_ops.TorchTensorOps object at 0x37d816360>
start = 12, stop = None, step = 1, dtype = None, device = None

    def arange(self, start: int, stop: Optional[int] = None, step: int = 1, dtype: Optional[DType] = None, device: Optional[str] = None) -> torch.Tensor:
        """
        Create a PyTorch tensor with evenly spaced values within a given interval.
    
        Args:
            start: Start of interval (inclusive)
            stop: End of interval (exclusive)
            step: Spacing between values
            dtype: Optional data type
            device: Optional device
    
        Returns:
            PyTorch tensor with evenly spaced values
        """
>       return torch.arange(start, stop, step, dtype=dtype, device=device)
E       TypeError: arange() received an invalid combination of arguments - got (int, NoneType, int, device=NoneType, dtype=NoneType), but expected one of:
E        * (Number end, *, Tensor out = None, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)
E        * (Number start, Number end, *, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)
E        * (Number start, Number end, Number step = 1, *, Tensor out = None, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)

../ember_ml/ops/torch/tensor_ops.py:111: TypeError
___________________ TestElementWiseOperations.test_clip[mlx] ___________________

self = <test_ops_math.TestElementWiseOperations object at 0x344642f30>
backend = 'mlx'

    def test_clip(self, backend):
        """Test clip operation."""
        # Create a tensor
>       x = ops.arange(12).reshape((3, 4))

test_ops_math.py:274: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:129: in <lambda>
    arange = lambda *args, **kwargs: tensor_ops().arange(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ember_ml.ops.mlx.tensor_ops.MLXTensorOps object at 0x37d233d40>
start = 12, stop = None, step = 1, dtype = None, device = None

    def arange(self, start: int, stop: Optional[int] = None, step: int = 1, dtype: Optional[DType] = None, device: Optional[str] = None) -> mx.array:
        """
        Create an MLX array with evenly spaced values within a given interval.
    
        Args:
            start: Start of interval (inclusive)
            stop: End of interval (exclusive)
            step: Spacing between values
            dtype: Optional data type
            device: Optional device
    
        Returns:
            MLX array with evenly spaced values
        """
>       return mx.arange(start, stop, step, dtype=dtype)
E       TypeError: arange(): incompatible function arguments. The following argument types are supported:
E           1. arange(start : Union[int, float], stop : Union[int, float], step : Union[None, int, float], dtype: Optional[Dtype] = None, *, stream: Union[None, Stream, Device] = None) -> array
E           2. arange(stop : Union[int, float], step : Union[None, int, float] = None, dtype: Optional[Dtype] = None, *, stream: Union[None, Stream, Device] = None) -> array
E       
E       Invoked with types: int, NoneType, int, kwargs = { dtype: NoneType }

../ember_ml/ops/mlx/tensor_ops.py:117: TypeError
___________________ TestActivationFunctions.test_relu[torch] ___________________

self = <test_ops_math.TestActivationFunctions object at 0x3446435c0>
backend = 'torch'

    def test_relu(self, backend):
        """Test relu operation."""
        # Create a tensor with negative values
>       x = ops.subtract(ops.arange(12).reshape((3, 4)), 5)

test_ops_math.py:297: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:129: in <lambda>
    arange = lambda *args, **kwargs: tensor_ops().arange(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ember_ml.ops.torch.tensor_ops.TorchTensorOps object at 0x37d8169c0>
start = 12, stop = None, step = 1, dtype = None, device = None

    def arange(self, start: int, stop: Optional[int] = None, step: int = 1, dtype: Optional[DType] = None, device: Optional[str] = None) -> torch.Tensor:
        """
        Create a PyTorch tensor with evenly spaced values within a given interval.
    
        Args:
            start: Start of interval (inclusive)
            stop: End of interval (exclusive)
            step: Spacing between values
            dtype: Optional data type
            device: Optional device
    
        Returns:
            PyTorch tensor with evenly spaced values
        """
>       return torch.arange(start, stop, step, dtype=dtype, device=device)
E       TypeError: arange() received an invalid combination of arguments - got (int, NoneType, int, device=NoneType, dtype=NoneType), but expected one of:
E        * (Number end, *, Tensor out = None, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)
E        * (Number start, Number end, *, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)
E        * (Number start, Number end, Number step = 1, *, Tensor out = None, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)

../ember_ml/ops/torch/tensor_ops.py:111: TypeError
____________________ TestActivationFunctions.test_relu[mlx] ____________________

self = <test_ops_math.TestActivationFunctions object at 0x344643050>
backend = 'mlx'

    def test_relu(self, backend):
        """Test relu operation."""
        # Create a tensor with negative values
>       x = ops.subtract(ops.arange(12).reshape((3, 4)), 5)

test_ops_math.py:297: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:129: in <lambda>
    arange = lambda *args, **kwargs: tensor_ops().arange(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ember_ml.ops.mlx.tensor_ops.MLXTensorOps object at 0x37d817530>
start = 12, stop = None, step = 1, dtype = None, device = None

    def arange(self, start: int, stop: Optional[int] = None, step: int = 1, dtype: Optional[DType] = None, device: Optional[str] = None) -> mx.array:
        """
        Create an MLX array with evenly spaced values within a given interval.
    
        Args:
            start: Start of interval (inclusive)
            stop: End of interval (exclusive)
            step: Spacing between values
            dtype: Optional data type
            device: Optional device
    
        Returns:
            MLX array with evenly spaced values
        """
>       return mx.arange(start, stop, step, dtype=dtype)
E       TypeError: arange(): incompatible function arguments. The following argument types are supported:
E           1. arange(start : Union[int, float], stop : Union[int, float], step : Union[None, int, float], dtype: Optional[Dtype] = None, *, stream: Union[None, Stream, Device] = None) -> array
E           2. arange(stop : Union[int, float], step : Union[None, int, float] = None, dtype: Optional[Dtype] = None, *, stream: Union[None, Stream, Device] = None) -> array
E       
E       Invoked with types: int, NoneType, int, kwargs = { dtype: NoneType }

../ember_ml/ops/mlx/tensor_ops.py:117: TypeError
_________________ TestActivationFunctions.test_softmax[torch] __________________

self = <test_ops_math.TestActivationFunctions object at 0x344643ad0>
backend = 'torch'

    def test_softmax(self, backend):
        """Test softmax operation."""
        # Create a tensor
>       x = ops.arange(12).reshape((3, 4))

test_ops_math.py:317: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:129: in <lambda>
    arange = lambda *args, **kwargs: tensor_ops().arange(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ember_ml.ops.torch.tensor_ops.TorchTensorOps object at 0x37d8179b0>
start = 12, stop = None, step = 1, dtype = None, device = None

    def arange(self, start: int, stop: Optional[int] = None, step: int = 1, dtype: Optional[DType] = None, device: Optional[str] = None) -> torch.Tensor:
        """
        Create a PyTorch tensor with evenly spaced values within a given interval.
    
        Args:
            start: Start of interval (inclusive)
            stop: End of interval (exclusive)
            step: Spacing between values
            dtype: Optional data type
            device: Optional device
    
        Returns:
            PyTorch tensor with evenly spaced values
        """
>       return torch.arange(start, stop, step, dtype=dtype, device=device)
E       TypeError: arange() received an invalid combination of arguments - got (int, NoneType, int, device=NoneType, dtype=NoneType), but expected one of:
E        * (Number end, *, Tensor out = None, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)
E        * (Number start, Number end, *, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)
E        * (Number start, Number end, Number step = 1, *, Tensor out = None, torch.dtype dtype = None, torch.layout layout = None, torch.device device = None, bool pin_memory = False, bool requires_grad = False)

../ember_ml/ops/torch/tensor_ops.py:111: TypeError
__________________ TestActivationFunctions.test_softmax[mlx] ___________________

self = <test_ops_math.TestActivationFunctions object at 0x344643d40>
backend = 'mlx'

    def test_softmax(self, backend):
        """Test softmax operation."""
        # Create a tensor
>       x = ops.arange(12).reshape((3, 4))

test_ops_math.py:317: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ember_ml/ops/__init__.py:129: in <lambda>
    arange = lambda *args, **kwargs: tensor_ops().arange(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ember_ml.ops.mlx.tensor_ops.MLXTensorOps object at 0x37d816a20>
start = 12, stop = None, step = 1, dtype = None, device = None

    def arange(self, start: int, stop: Optional[int] = None, step: int = 1, dtype: Optional[DType] = None, device: Optional[str] = None) -> mx.array:
        """
        Create an MLX array with evenly spaced values within a given interval.
    
        Args:
            start: Start of interval (inclusive)
            stop: End of interval (exclusive)
            step: Spacing between values
            dtype: Optional data type
            device: Optional device
    
        Returns:
            MLX array with evenly spaced values
        """
>       return mx.arange(start, stop, step, dtype=dtype)
E       TypeError: arange(): incompatible function arguments. The following argument types are supported:
E           1. arange(start : Union[int, float], stop : Union[int, float], step : Union[None, int, float], dtype: Optional[Dtype] = None, *, stream: Union[None, Stream, Device] = None) -> array
E           2. arange(stop : Union[int, float], step : Union[None, int, float] = None, dtype: Optional[Dtype] = None, *, stream: Union[None, Stream, Device] = None) -> array
E       
E       Invoked with types: int, NoneType, int, kwargs = { dtype: NoneType }

../ember_ml/ops/mlx/tensor_ops.py:117: TypeError
=============================== warnings summary ===============================
<frozen importlib._bootstrap>:488
  <frozen importlib._bootstrap>:488: DeprecationWarning: Type google._upb._message.MessageMapContainer uses PyType_Spec with a metaclass that has custom tp_new. This is deprecated and will no longer be allowed in Python 3.14.

<frozen importlib._bootstrap>:488
  <frozen importlib._bootstrap>:488: DeprecationWarning: Type google._upb._message.ScalarMapContainer uses PyType_Spec with a metaclass that has custom tp_new. This is deprecated and will no longer be allowed in Python 3.14.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED test_ops_math.py::TestReductionOperations::test_mean[torch] - TypeErro...
FAILED test_ops_math.py::TestReductionOperations::test_mean[mlx] - TypeError:...
FAILED test_ops_math.py::TestReductionOperations::test_sum[torch] - TypeError...
FAILED test_ops_math.py::TestReductionOperations::test_sum[mlx] - TypeError: ...
FAILED test_ops_math.py::TestElementWiseOperations::test_clip[torch] - TypeEr...
FAILED test_ops_math.py::TestElementWiseOperations::test_clip[mlx] - TypeErro...
FAILED test_ops_math.py::TestActivationFunctions::test_relu[torch] - TypeErro...
FAILED test_ops_math.py::TestActivationFunctions::test_relu[mlx] - TypeError:...
FAILED test_ops_math.py::TestActivationFunctions::test_softmax[torch] - TypeE...
FAILED test_ops_math.py::TestActivationFunctions::test_softmax[mlx] - TypeErr...
================== 10 failed, 41 passed, 2 warnings in 5.40s ===================
